{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACC,4BAAKL,GACL,2BAAIC,MCeOK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAKEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCAnEW,EAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,2BACCX,UAAU,mCACVY,KAAK,OACLC,YAAY,gBACZC,SAAUH,KCDEI,EAJA,SAACC,GACf,OAAO,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAAYJ,EAAMK,WCqBjFC,E,kDAtBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACP,+CAGAG,KAAKX,MAAMK,a,GAlBOQ,IAAMC,WCuDnBC,E,kDAhDd,aAAe,IAAD,8BACb,gBAQDC,eAAiB,SAACC,GACjB,EAAKL,SAAS,CAAElB,YAAauB,EAAMC,OAAOC,QAC1CC,QAAQC,IAAIJ,EAAMC,OAAOC,QATzB,EAAKZ,MAAQ,CACZnB,OAAQ,GACRM,YAAa,IAJD,E,gEAcO,IAAD,OACnB4B,MAAM,8CACJC,MAAK,SAACC,GACN,OAAOA,EAASC,UAEhBF,MAAK,SAACG,GACN,EAAKd,SAAS,CAAExB,OAAQsC,S,+BAIjB,IAAD,OACFC,EAAiBhB,KAAKJ,MAAMnB,OAAOwC,QAAO,SAACxC,GAChD,OAAOA,EAAOP,KAAKgD,cAAcC,SAAS,EAAKvB,MAAMb,YAAYmC,kBAGlE,OADAT,QAAQC,IAAIM,GACqB,IAA7BhB,KAAKJ,MAAMnB,OAAO2C,OACd,uCAIN,yBAAK/C,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKK,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAAQuC,W,GAxCPb,aCElBkB,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SPqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLW,QAAQX,MAAMA,EAAMkC,a","file":"static/js/main.cb96304a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\t//*const { name, email } = props; this is destructuring, but you can also do it in parameters\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt='photo' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\n//* if the file doesn't export default, you need to destructure it\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/*<Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\r\n\t\t\t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\r\n            <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />\r\n            before we hard coded it*/}\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n\t\t\t})}\r\n\t\t\t{\r\n\t\t\t\t//* no need to save this in a new array and return that, this is cleaner.\r\n\t\t\t\t//*you add a key prop because with that react can keep track of what is being changed\r\n\t\t\t\t//! a better key than i should be something unique and fixed. If we shuffle around components then the key and id don't correspond. id should be better\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n\treturn (\r\n\t\t<input\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='text'\r\n\t\t\tplaceholder='Search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n//! react has props, has state, but also has children\r\n\r\nconst Scroll = (props) => {\r\n\treturn <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>{props.children}</div>;\r\n};\r\n//! if i return props.children, nothing changes! the chilren of this component can be passed down through props.children. On the other hand if you wrap a component in a component and you return something like an h1 the children disappear. Any component in react has props.children, even if you don't pass any props\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\t//if the component had a problem mounting, this lifecycle method is going to fire\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>That's not good</h1>;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\n\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { robots } from './robots.js';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t};\r\n\t}\r\n\t//* state is something that can change in our app and describes the state the app is in\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t\tconsole.log(event.target.value);\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((users) => {\r\n\t\t\t\tthis.setState({ robots: users });\r\n\t\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter((robots) => {\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t});\r\n\t\tconsole.log(filteredRobots);\r\n\t\tif (this.state.robots.length === 0) {\r\n\t\t\treturn <h1>Loading</h1>;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n//! you pass the function here, because state needs to be in the parent component, then you put it in the input in the component!\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}